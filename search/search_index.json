{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MeteleAPI","text":"<p>MeteleAPI is a project that aims to enable programmers to start implementing an API using FastAPI quickly and easily.</p>"},{"location":"#why","title":"Why","text":"<p>On every new FastAPI project, you need to define a logger, consume environment variables from an .env file, maybe you'll consume 3rd services so you'll need an http api client and the list goes on.</p> <p>MeteleAPI tries to help you with these repetitive tasks so you can start writing your API endpoints and focus on your business logic from moment zero.</p>"},{"location":"#how","title":"How","text":"<p>MeteleAPI already provides you with a directory structure that it's suggested to be followed, but it's up to you how do you want to structure your code.</p> <p>MeteleAPI comes with batteries included. It provides services, which are simple Python modules that provide reusable generic functionalities that are generally necessary when developing an API. See Services tab for more information. Also, If you want to contribute to the project, new services are very welcome!</p> <p>MeteleAPI takes care of everything related to the Python interpreter you want to use in your project. You only have to specify which version of Python you want to use (and this is optional! If you don't choose a Python version to run the project with, one will be automatically selected). You no longer have to struggle with virtualenvs, installing the Python interpreter, etc. MeteleAPI does it for you :)</p> <p>MeteleAPI automatically generates files for Docker and Docker Compose, so you can run the API within a Docker container. Additionally, it comes configured with hot-reloading, so any changes you make to your source code are automatically reloaded within the container.</p> <p>MeteleAPI makes it very easy to manage dependencies or third-party libraries in your project. Providing this functionality is thanks to the Rye project, which MeteleAPI uses.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#clone-repo","title":"Clone repo","text":"<p>The first step is to clone the repository.</p> <pre><code>git clone https://github.com/edvm/metele-api.git\n</code></pre> <p>After you clone the repo, execute cd metele-api, you should see the followign directory structure:</p> <pre><code>\u279c  cd metele-api \n\u279c  metele-api git:(main) ls -l\ntotal 24\ndrwxr-xr-x  11 edvm  staff   352B Mar  2 14:54 .\ndrwxr-xr-x@  6 edvm  staff   192B Mar  2 14:54 ..\ndrwxr-xr-x  12 edvm  staff   384B Mar  2 14:54 .git\ndrwxr-xr-x   3 edvm  staff    96B Mar  2 14:54 .github\n-rw-r--r--   1 edvm  staff   3.2K Mar  2 14:54 .gitignore\n-rw-r--r--   1 edvm  staff   1.9K Mar  2 14:54 README.md\ndrwxr-xr-x   8 edvm  staff   256B Mar  2 14:54 app\ndrwxr-xr-x   4 edvm  staff   128B Mar  2 14:54 docs\n-rw-r--r--   1 edvm  staff   593B Mar  2 14:54 metele.example\ndrwxr-xr-x   4 edvm  staff   128B Mar  2 14:54 scripts\ndrwxr-xr-x   4 edvm  staff   128B Mar  2 14:54 tests\n</code></pre>"},{"location":"quickstart/#create-metele-file","title":"Create .metele file","text":"<p>Next, you need to create a .metele file (at metele-api root directory), where environment variables are defined to generate configuration files. It also works as an .env file, where its values are available both in the current environment and if the project is run within a docker container. The project provides a metele.example file, copy and paste this file and edit it with the corresponding values for your project.</p> <p>So execute cp metele.example .metele:</p> <pre><code>\u279c  metele-api git:(main) cp metele.example .metele\n</code></pre>"},{"location":"quickstart/#run-the-installer","title":"Run the installer","text":"<p>Now run the installer. The installer, using the values you set on .metele file, will auto-generate files for docker, docker compose, pyproject, requirements, etc. It'll download the Python version you specified, it'll create a virtual environment, install the project requirements on it, etc.</p> <p>Run the installer by executing ./scripts/devel/localenv.sh install</p> <pre><code>metele-api git:(main) ./scripts/devel/localenv.sh install\n</code></pre>"},{"location":"quickstart/#rye-installer","title":"Rye installer","text":"<p>If it is the first time you run it, it'll install Rye (Python interpreter and virtual environment manager). It is suggested to respond with the following values to the questions made by the installer:</p> <p>1- When asked to continue, say y:</p> <pre><code>This script will automatically download and install rye (latest) for you.\n######################################################################## 100.0%\nWelcome to Rye!\n\nThis installer will install rye to /Users/edvm/.rye\nThis path can be changed by exporting the RYE_HOME environment variable.\n\nDetails:\n  Rye Version: 0.27.0\n  Platform: macos (aarch64)\n\n? Continue? (y/n) \u203a\n</code></pre> <p>2- When asked to choose between pip-tools or uv, select uv :</p> <pre><code>? Select the preferred package installer \u203a\n  pip-tools (slow but stable)\n\u276f uv (quick but experimental)\n</code></pre> <p>3- When asked what should happen when typing python outside a Rye project select: Run the old default Python (provided by your OS, pyenv, etc.) :</p> <pre><code>? What should running `python` or `python3` do when you are not inside a Rye managed project? \u203a\n  Run a Python installed and managed by Rye\n\u276f Run the old default Python (provided by your OS, pyenv, etc.)\n</code></pre> <p>4- When asked to add rye to your $PATH, say y:</p> <pre><code>The rye directory /Users/edvm/.rye/shims was not detected on PATH.\nIt is highly recommended that you add it.\n? Should the installer add Rye to PATH via .profile? (y/n) \u203a\n</code></pre> <p>That's it!</p>"},{"location":"quickstart/#post-install","title":"Post install","text":"<p>You're ready to run the project on your local machine or inside a docker container. It's up to you how do you want to proceed.</p> <p>Code will be auto-reloaded after any change you make on the source code (hot-reloading), both if running the project on your local or within Docker.</p>"},{"location":"quickstart/#running-on-my-local","title":"Running on my local","text":"<p>First thing to do is open a new terminal OR run  source ~/.rye/env.</p> <p>Second thing is to run the API. Do it by executing ./scripts/devel/localenv.sh up.</p> <pre><code>\u279c  metele-api git:(main) \u2717 ./scripts/devel/localenv.sh up\n2024-03-02 15:20:15.568 | INFO     | main:&lt;module&gt;:31 - CORS allowed for all origins.\n2024-03-02 15:20:15.844 | INFO     | main:&lt;module&gt;:31 - CORS allowed for all origins.\n[2024-03-02 15:20:15 -0500] [70608] [INFO] Running on http://0.0.0.0:7000 (CTRL + C to quit)\nINFO:hypercorn.error:Running on http://0.0.0.0:7000 (CTRL + C to quit)\n</code></pre> <p>Open your web browser and point it to http://localhost:7000/api/v1/hello , you should get back a JSON response like:</p> <pre><code>{\"message\":\"Hello World\"}\n</code></pre>"},{"location":"quickstart/#running-with-docker","title":"Running with Docker","text":"<p>The installer already auto-generated a dockerfile and docker compose files so just run docker compose up</p> <pre><code>\u279c  metele-api git:(main) \u2717 docker compose up     \n... blah, blah, blah ...\n \u2714 Container orion  Recreated                                                                                                    0.1s \nAttaching to orion\norion  | 2024-03-02 20:31:27.220 | INFO     | main:&lt;module&gt;:31 - CORS allowed for all origins.\norion  | 2024-03-02 20:31:27.528 | INFO     | main:&lt;module&gt;:31 - CORS allowed for all origins.\norion  | [2024-03-02 20:31:27 +0000] [8] [INFO] Running on http://0.0.0.0:7000 (CTRL + C to quit)\norion  | INFO:hypercorn.error:Running on http://0.0.0.0:7000 (CTRL + C to quit)\n</code></pre>"},{"location":"services/","title":"Services","text":""},{"location":"services/#services","title":"Services","text":"<p>Services must be placed inside <code>app/services/</code> directory. The project already provides the following services:</p>"},{"location":"services/#http","title":"HTTP","text":"<p>Its an HTTP client. Usefull when you have to call external API's or other services. By default, it'll retry up to 5 times if the request fails.</p> <pre><code>from services import http\n\nasync def test():\n    result = await http.get(url=\"https://google.com\")\n</code></pre>"},{"location":"services/#logger","title":"Logger","text":"<p>A logger ready to be used.</p> <pre><code>from services import logger\n\nasync def test():\n    logger.debug(\"cool!\")\n</code></pre>"},{"location":"services/#settings","title":"Settings","text":"<p>Access your project settings from any part of your code. Remember that settings are defined on <code>settings.py</code> -&gt; <code>Settings</code> class.  Any class attribute defined in <code>Settings</code> class can be overrided on .env file  </p> <pre><code>from services import settings\n\nasync def test():\n    return settings.HOST + \":\" + settings.PORT\n</code></pre>"}]}